			+--------------------------+
			| CSCC69                   |
			| PROJECT 0: Bootstrapping |
			| DESIGN DOCUMENT          |
			+--------------------------+
				   
---- AUTHOR ----

>> Fill in your name and email address.
 
FirstName LastName <email@domain.example>
Mohammed Abdullah Ibne Khan <mohammedibne.khan@mail.utoronto.ca>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     Booting Pintos
			     ==============

---- QUESTIONS ---- 
>> Put the screenshots of Pintos running in src/p0.
>> A1: Is there any particular issue that you would like us to know?

			     Debugging
			     =========

---- QUESTIONS: BIOS ---- 
>> B1: What is the first instruction that gets executed?

ANS:      ljmp   $0x3630,$0xf000e05b

>> B2: At which physical address is this instruction located?

ANS:    0X000ffff0

>> B3: Can you guess why the first instruction is like this?

ANS: The kernel first needs to gain access to the BIOS and then  jumps to
     execute the startup code using the ljmp control instruction,
     because the 16 bytes(0X000ffff0 to 0x0100000) of remaining 
     BIOS ROM are not enough to contain or execute a meaningful startup program
     thus it must move to a different location with more space.
     
>> B4: What are the next three instructions?
	
ANS:The next 3 instructions were:
             cmpw   $0xffc8,%cs:(%esi)
             jne    0xd241d416
             xor    %edx,%edx
	

---- QUESTIONS: BOOTLOADER ---- 
>> B5: How does the bootloader read disk sectors? In particular, what BIOS interrupt
is used?

ANS:The process starts with reading the master boot record(mbr) as shown in read_mbr(in loader.S) which checks 
    partition tables on each system hard disk, looking for the kernel and reads disk sectors as describe
    in read_sector(in loader.S) is done as follows:  
    A sector read subroutine is used where it takes a drive number in DL register (0x80 = hard
    disk 0, 0x81 = hard disk 1, ...) and a sector number in EBX, and
    reads the specified sector into memory at ES:0000 returning . INT 13h is used.

>> B6: How does the bootloader decides whether it successfully finds the Pintos kernel?

ANS: The bootloader reads the partition table on each system hard disk and scans for a
     partition of type 0x20, finding which ensures that Pintos kernel is successfully found.

>> B7: What happens when the bootloader could not find the Pintos kernel?

ANS: If the bootloader didn't find a pintos kernel partition 
     anywhere it gives up and prints "Not found" to the console.
     Then it notifies BIOS that boot failed using INT 18h.


>> B8: At what point and how exactly does the bootloader transfer control to the Pintos kernel?

ANS: After successfully finding the bootable kernel, the loader reads 
     the partition's contents into memory at physical address 128 kB
     and now it's time for the bootloader to transfer control 
     to it. It reads the start address out of the ELF header and 
     converts it from a 32-bit linear address into a 16:16 segment:offset address for
     real mode, then jumps to the converted address in the end.

---- QUESTIONS: KERNEL ---- 
>> B9: At the entry of pintos_init(), what is the value of expression 
init_page_dir[pd_no(ptov(0))] in hexadecimal format?

>> B10: When palloc_get_page() is called for the first time,

>> B10.1 what does the call stack look like?

ANS: #0  palloc_get_page (flags=flags@entry=(PAL_ASSERT | PAL_ZERO)) at ../../threads/palloc.c:112
     #1  0xc00205a5 in paging_init () at ../../threads/init.c:250
     #2  main () at ../../threads/init.c:100

>> B10.2 what is the return value in hexadecimal format?

ANS:     0xc0101000

>> B10.3 what is the value of expression init_page_dir[pd_no(ptov(0))] in hexadecimal format?

>> B11: When palloc_get_page() is called for the third time,

>> B11.1 what does the call stack look like?

ANS: #0  palloc_get_page (flags=flags@entry=PAL_ZERO) at ../../threads/palloc.c:112
     #1  0xc0020e54 in thread_create (name=name@entry=0xc003040c "idle", priority=priority@entry=0, 
         function=function@entry=0xc0021416 <idle>, aux=aux@entry=0xc000ef0c)
         at ../../threads/thread.c:178
     #2  0xc0020f89 in thread_start () at ../../threads/thread.c:111
     #3  0xc002077f in main () at ../../threads/init.c:119

>> B11.2 what is the return value in hexadecimal format?

ANS: 0xc0103000

>> B11.3 what is the value of expression init_page_dir[pd_no(ptov(0))] in hexadecimal format?

			     Kernel Monitor
			     ==============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.  

ANS:No new structs had to be declared for this part of the project.
    The only new global variable type that I learned from this part of the project was
    uint8_t which is a shorthand for: a type of unsigned integer of length 8 bits and was used to 
    hold the ASCII code for the returns of input_getc() used to read individual characters from the console.   
        

---- ALGORITHMS ----
>> C2: Explain how you read and write to the console for the kernel monitor.

ANS:The function that was used for reading characters is input_getc() from the file
    in  "devices/input.c" and putbuf() from "lib/kernel/console.c".
    
    inputgetc() read characters individually  and returned it's ASCII code which is of type uin8_t.
    Then I converted the ASCII code to it's corresponding character.
    used putbuf() to write down each of these characters to the console when they are typed; till ENTER KEY is pressed.
    As the ENTER KEY is pressed print statements handle the rest of the demanded procedure.
    
>> C3: Any additional enhancement you implement?